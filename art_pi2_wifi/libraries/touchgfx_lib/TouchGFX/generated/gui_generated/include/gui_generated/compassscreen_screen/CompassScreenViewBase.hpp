/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef COMPASSSCREENVIEWBASE_HPP
#define COMPASSSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/compassscreen_screen/CompassScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextureMapper.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <gui/containers/FrameRate_Compass.hpp>
#include <gui/containers/MCULoadPercentage_Compass.hpp>

class CompassScreenViewBase : public touchgfx::View<CompassScreenPresenter>
{
public:
    CompassScreenViewBase();
    virtual ~CompassScreenViewBase();
    virtual void setupScreen();

    /*
     * Custom Actions
     */
    virtual void goToMain()
    {
        // Override and implement this function in Screen1
    }


protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image background;
    touchgfx::TextureMapper wheel;
    touchgfx::TextAreaWithOneWildcard angleVerbose;
    touchgfx::TextAreaWithOneWildcard angleNumeric;
    touchgfx::Image compassCenter;
    touchgfx::Button backButton;
    touchgfx::TextArea mcuLoadLabelText;
    touchgfx::TextArea fpsLabelText;
    FrameRate_Compass frameRateContainer;
    MCULoadPercentage_Compass mcuLoadPercentageContainer;

    /*
     * Wildcard Buffers
     */
    static const uint16_t ANGLEVERBOSE_SIZE = 11;
    touchgfx::Unicode::UnicodeChar angleVerboseBuffer[ANGLEVERBOSE_SIZE];
    static const uint16_t ANGLENUMERIC_SIZE = 4;
    touchgfx::Unicode::UnicodeChar angleNumericBuffer[ANGLENUMERIC_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<CompassScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // COMPASSSCREENVIEWBASE_HPP
