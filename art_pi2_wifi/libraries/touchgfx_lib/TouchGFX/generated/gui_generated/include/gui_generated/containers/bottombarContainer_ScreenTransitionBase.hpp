/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef BOTTOMBARCONTAINER_SCREENTRANSITIONBASE_HPP
#define BOTTOMBARCONTAINER_SCREENTRANSITIONBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include "gui/common/structs.hpp"
#include <touchgfx/containers/SlideMenu.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/scrollers/ScrollWheel.hpp>
#include <gui/containers/transitionItem_ScreenTransition.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/FadeAnimator.hpp>
#include <touchgfx/widgets/TextureMapper.hpp>
#include <gui/containers/animationButton_ScreenTransition.hpp>

class bottombarContainer_ScreenTransitionBase : public touchgfx::Container
{
public:
    bottombarContainer_ScreenTransitionBase();
    virtual ~bottombarContainer_ScreenTransitionBase();
    virtual void initialize();

    virtual void transitionSelectionWheelUpdateItem(transitionItem_ScreenTransition& item, int16_t itemIndex)
    {
        // Override and implement this function in bottombarContainer_ScreenTransition
    }

    /*
     * Custom Actions
     */
    virtual void animateArrow(SlideMenu::State value)
    {
        // Override and implement this function in Screen1
    }


    /*
     * Custom Trigger Callback Setters
     */
    void setGetTransitionInfoCallback(touchgfx::GenericCallback<TransitionInfo*>& callback)
    {
        this->getTransitionInfoCallback = &callback;
    }
    void setScrollWheelPressedCallback(touchgfx::GenericCallback<>& callback)
    {
        this->scrollWheelPressedCallback = &callback;
    }
    void setScrollWheelAnimationEndedCallback(touchgfx::GenericCallback<>& callback)
    {
        this->scrollWheelAnimationEndedCallback = &callback;
    }
    void setAnimaitonSpeedPressedCallback(touchgfx::GenericCallback<bool>& callback)
    {
        this->animaitonSpeedPressedCallback = &callback;
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitGetTransitionInfoCallback(TransitionInfo* value)
    {
        if (getTransitionInfoCallback && getTransitionInfoCallback->isValid())
        {
            this->getTransitionInfoCallback->execute( value);
        }
    }
    virtual void emitScrollWheelPressedCallback()
    {
        if (scrollWheelPressedCallback && scrollWheelPressedCallback->isValid())
        {
            this->scrollWheelPressedCallback->execute();
        }
    }
    virtual void emitScrollWheelAnimationEndedCallback()
    {
        if (scrollWheelAnimationEndedCallback && scrollWheelAnimationEndedCallback->isValid())
        {
            this->scrollWheelAnimationEndedCallback->execute();
        }
    }
    virtual void emitAnimaitonSpeedPressedCallback(bool value)
    {
        if (animaitonSpeedPressedCallback && animaitonSpeedPressedCallback->isValid())
        {
            this->animaitonSpeedPressedCallback->execute( value);
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::Image background;
    touchgfx::ScrollWheel transitionSelectionWheel;
    touchgfx::DrawableListItems<transitionItem_ScreenTransition, 9> transitionSelectionWheelListItems;
    touchgfx::Image overlay1;
    touchgfx::Image overlay2;
    touchgfx::FadeAnimator< touchgfx::Image > top;
    touchgfx::FadeAnimator< touchgfx::TextureMapper > buttonIndicator;
    animationButton_ScreenTransition animationSpeedButton;

private:

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<TransitionInfo*>* getTransitionInfoCallback;
    touchgfx::GenericCallback<>* scrollWheelPressedCallback;
    touchgfx::GenericCallback<>* scrollWheelAnimationEndedCallback;
    touchgfx::GenericCallback<bool>* animaitonSpeedPressedCallback;

    /*
     * Callback Declarations
     */
    touchgfx::Callback<bottombarContainer_ScreenTransitionBase, touchgfx::DrawableListItemsInterface*, int16_t, int16_t> updateItemCallback;
    touchgfx::Callback<bottombarContainer_ScreenTransitionBase, bool> animationSpeedButtonButtonPressedCallback;

    /*
     * Callback Handler Declarations
     */
    void updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex);
    void animationSpeedButtonButtonPressedCallbackHandler(bool value);

};

#endif // BOTTOMBARCONTAINER_SCREENTRANSITIONBASE_HPP
