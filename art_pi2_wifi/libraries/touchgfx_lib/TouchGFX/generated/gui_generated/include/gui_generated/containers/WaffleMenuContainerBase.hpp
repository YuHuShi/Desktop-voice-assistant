/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef WAFFLEMENUCONTAINERBASE_HPP
#define WAFFLEMENUCONTAINERBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/FadeAnimator.hpp>
#include <touchgfx/containers/SlideMenu.hpp>
#include <gui/containers/WaffleMenuIcon.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>

class WaffleMenuContainerBase : public touchgfx::Container
{
public:
    WaffleMenuContainerBase();
    virtual ~WaffleMenuContainerBase();
    virtual void initialize();

    /*
     * Custom Actions
     */
    virtual void changeStateOfMenuTo(SlideMenu::State value)
    {
        // Override and implement this function in Screen1
    }


    /*
     * Custom Trigger Callback Setters
     */
    void setNewWaffleIsChosenCallback(touchgfx::GenericCallback<>& callback)
    {
        this->newWaffleIsChosenCallback = &callback;
    }
    void setSlideMenuChangedStateCallback(touchgfx::GenericCallback<>& callback)
    {
        this->slideMenuChangedStateCallback = &callback;
    }

    /*
     * Virtual Action Handlers
     */
    virtual void bigWaffleIsChosen()
    {
        // Override and implement this function in WaffleMenuContainer
    }
    virtual void mediumWaffleIsChosen()
    {
        // Override and implement this function in WaffleMenuContainer
    }
    virtual void smallWaffleIsChosen()
    {
        // Override and implement this function in WaffleMenuContainer
    }
    virtual void reactAccordinglyToTheNewStateOfMenu()
    {
        // Override and implement this function in WaffleMenuContainer
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Custom Trigger Emitters
     */
    virtual void emitNewWaffleIsChosenCallback()
    {
        if (newWaffleIsChosenCallback && newWaffleIsChosenCallback->isValid())
        {
            this->newWaffleIsChosenCallback->execute();
        }
    }
    virtual void emitSlideMenuChangedStateCallback()
    {
        if (slideMenuChangedStateCallback && slideMenuChangedStateCallback->isValid())
        {
            this->slideMenuChangedStateCallback->execute();
        }
    }

    /*
     * Member Declarations
     */
    touchgfx::FadeAnimator< touchgfx::Image > waffleLabel;
    touchgfx::SlideMenu slideMenu;
    WaffleMenuIcon bigWaffleMenuIcon;
    WaffleMenuIcon mediumWaffleMenuIcon;
    WaffleMenuIcon smallWaffleMenuIcon;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  menuClickListener;

private:

    /*
     * Custom Trigger Callback Declarations
     */
    touchgfx::GenericCallback<>* newWaffleIsChosenCallback;
    touchgfx::GenericCallback<>* slideMenuChangedStateCallback;

    /*
     * Callback Declarations
     */
    touchgfx::Callback<WaffleMenuContainerBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback<WaffleMenuContainerBase> bigWaffleMenuIconIconIsPressedCallback;
    touchgfx::Callback<WaffleMenuContainerBase> mediumWaffleMenuIconIconIsPressedCallback;
    touchgfx::Callback<WaffleMenuContainerBase> smallWaffleMenuIconIconIsPressedCallback;
    touchgfx::Callback<WaffleMenuContainerBase, const touchgfx::SlideMenu&> slideMenuAnimationEndedCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void bigWaffleMenuIconIconIsPressedCallbackHandler();
    void mediumWaffleMenuIconIconIsPressedCallbackHandler();
    void smallWaffleMenuIconIconIsPressedCallbackHandler();
    void slideMenuAnimationEndedCallbackHandler(const touchgfx::SlideMenu& src);

};

#endif // WAFFLEMENUCONTAINERBASE_HPP
