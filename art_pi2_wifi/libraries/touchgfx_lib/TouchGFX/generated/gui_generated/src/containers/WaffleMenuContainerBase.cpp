/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/WaffleMenuContainerBase.hpp>
#include <images/BitmapDatabase.hpp>
#include <touchgfx/Color.hpp>

WaffleMenuContainerBase::WaffleMenuContainerBase() :
    newWaffleIsChosenCallback(0),
    slideMenuChangedStateCallback(0),
    flexButtonCallback(this, &WaffleMenuContainerBase::flexButtonCallbackHandler),
    bigWaffleMenuIconIconIsPressedCallback(this, &WaffleMenuContainerBase::bigWaffleMenuIconIconIsPressedCallbackHandler),
    mediumWaffleMenuIconIconIsPressedCallback(this, &WaffleMenuContainerBase::mediumWaffleMenuIconIconIsPressedCallbackHandler),
    smallWaffleMenuIconIconIsPressedCallback(this, &WaffleMenuContainerBase::smallWaffleMenuIconIconIsPressedCallbackHandler),
    slideMenuAnimationEndedCallback(this, &WaffleMenuContainerBase::slideMenuAnimationEndedCallbackHandler)
{
    setWidth(230);
    setHeight(135);
    waffleLabel.setXY(127, 47);
    waffleLabel.setBitmap(touchgfx::Bitmap(BITMAP_WAFFLE_MENU_TITLE_ID));
    add(waffleLabel);

    slideMenu.setXY(0, 17);
    slideMenu.setup(touchgfx::SlideMenu::WEST,
        touchgfx::Bitmap(BITMAP_WAFFLE_MENU_EXPAND_ID),
        0, 0);
    slideMenu.setState(touchgfx::SlideMenu::COLLAPSED);
    slideMenu.setVisiblePixelsWhenCollapsed(80);
    slideMenu.setHiddenPixelsWhenExpanded(0);
    slideMenu.setAnimationEasingEquation(touchgfx::EasingEquations::cubicEaseInOut);
    slideMenu.setAnimationDuration(18);
    slideMenu.setExpandedStateTimeout(900);
    slideMenu.setStateChangedAnimationEndedCallback(slideMenuAnimationEndedCallback);
    bigWaffleMenuIcon.setXY(12, 10);
    bigWaffleMenuIcon.setIconIsPressedCallback(bigWaffleMenuIconIconIsPressedCallback);
    slideMenu.add(bigWaffleMenuIcon);

    mediumWaffleMenuIcon.setXY(85, 10);
    mediumWaffleMenuIcon.setIconIsPressedCallback(mediumWaffleMenuIconIconIsPressedCallback);
    slideMenu.add(mediumWaffleMenuIcon);

    smallWaffleMenuIcon.setXY(160, 10);
    smallWaffleMenuIcon.setIconIsPressedCallback(smallWaffleMenuIconIconIsPressedCallback);
    slideMenu.add(smallWaffleMenuIcon);

    add(slideMenu);

    menuClickListener.setBoxWithBorderPosition(0, 0, 84, 100);
    menuClickListener.setBorderSize(5);
    menuClickListener.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    menuClickListener.setAlpha(0);
    menuClickListener.setAction(flexButtonCallback);
    menuClickListener.setPosition(147, 30, 84, 100);
    add(menuClickListener);
}

WaffleMenuContainerBase::~WaffleMenuContainerBase()
{

}

void WaffleMenuContainerBase::initialize()
{
    bigWaffleMenuIcon.initialize();
    mediumWaffleMenuIcon.initialize();
    smallWaffleMenuIcon.initialize();
}

void WaffleMenuContainerBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &menuClickListener)
    {
        //ExpandTheMenu
        //When menuClickListener clicked call changeStateOfMenuTo on WaffleMenuContainer
        //Call changeStateOfMenuTo
        changeStateOfMenuTo(SlideMenu::EXPANDED);
    }
}

void WaffleMenuContainerBase::bigWaffleMenuIconIconIsPressedCallbackHandler()
{
    //BigWaffleIsChosen
    //When bigWaffleMenuIcon IconIsPressed call virtual function
    //Call bigWaffleIsChosen
    bigWaffleIsChosen();
}

void WaffleMenuContainerBase::mediumWaffleMenuIconIconIsPressedCallbackHandler()
{
    //MediumWaffleIsChosen
    //When mediumWaffleMenuIcon IconIsPressed call virtual function
    //Call mediumWaffleIsChosen
    mediumWaffleIsChosen();
}

void WaffleMenuContainerBase::smallWaffleMenuIconIconIsPressedCallbackHandler()
{
    //SmallWaffleIsChosen
    //When smallWaffleMenuIcon IconIsPressed call virtual function
    //Call smallWaffleIsChosen
    smallWaffleIsChosen();
}

void WaffleMenuContainerBase::slideMenuAnimationEndedCallbackHandler(const touchgfx::SlideMenu& src)
{
    if (&src == &slideMenu)
    {
        //ChangeWaffleLabelAndClickListenerWhenStateOfMenuChanges
        //When slideMenu animation ended call virtual function
        //Call reactAccordinglyToTheNewStateOfMenu
        reactAccordinglyToTheNewStateOfMenu();
    }
}
