/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/svg_screen/SVGViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include<images/SVGDatabase.hpp>

SVGViewBase::SVGViewBase() :
    hideTheMainWaffleEndedCallback(this, &SVGViewBase::hideTheMainWaffleEndedCallbackHandler),
    waffleMenuNewWaffleIsChosenCallback(this, &SVGViewBase::waffleMenuNewWaffleIsChosenCallbackHandler),
    buttonCallback(this, &SVGViewBase::buttonCallbackHandler),
    waffleMenuSlideMenuChangedStateCallback(this, &SVGViewBase::waffleMenuSlideMenuChangedStateCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    backgroundImage.setXY(0, 0);
    backgroundImage.setBitmap(touchgfx::Bitmap(BITMAP_ICE_CREAM_BACKGROND_WITH_SHADOW_ID));
    add(backgroundImage);

    backButton.setXY(0, 0);
    backButton.setBitmaps(touchgfx::Bitmap(BITMAP_ICECREAM_BACK_BUTTON_NORMAL_ID), touchgfx::Bitmap(BITMAP_ICECREAM_BACK_BUTTON_PRESSED_ID));
    backButton.setAction(buttonCallback);
    add(backButton);

    mcuLoadPercentageContainer.setXY(21, 439);
    add(mcuLoadPercentageContainer);

    frameRateContainer.setXY(691, 439);
    add(frameRateContainer);

    mainWaffle.setSVG(SVG_WAFFLE_LARGE_ID);
    mainWaffle.setPosition(290, 230, 220, 220);
    mainWaffle.setScale(1.0f, 1.0f);
    mainWaffle.setImagePosition(49, 15);
    mainWaffle.setRotationCenter(110, 110);
    mainWaffle.setRotation(0.0f);
    add(mainWaffle);

    leftButton.setXY(207, 314);
    leftButton.setBitmaps(touchgfx::Bitmap(BITMAP_ICECREAM_PREVOIUS_NORMAL_ID), touchgfx::Bitmap(BITMAP_ICECREAM_PREVOIUS_PRESSED_ID));
    leftButton.setAction(buttonCallback);
    add(leftButton);

    rightButton.setXY(495, 314);
    rightButton.setBitmaps(touchgfx::Bitmap(BITMAP_ICECREAM_NEXT_NORMAL_ID), touchgfx::Bitmap(BITMAP_ICECREAM_NEXT_PRESSED_ID));
    rightButton.setAction(buttonCallback);
    add(rightButton);

    waffleMenu.setXY(570, -3);
    waffleMenu.setNewWaffleIsChosenCallback(waffleMenuNewWaffleIsChosenCallback);
    waffleMenu.setSlideMenuChangedStateCallback(waffleMenuSlideMenuChangedStateCallback);
    add(waffleMenu);

    iceWheelContainer.setXY(0, 130);
    add(iceWheelContainer);
}

SVGViewBase::~SVGViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void SVGViewBase::setupScreen()
{
    mcuLoadPercentageContainer.initialize();
    frameRateContainer.initialize();
    waffleMenu.initialize();
    iceWheelContainer.initialize();
}

void SVGViewBase::waffleMenuNewWaffleIsChosenCallbackHandler()
{
    //HideTheMainWaffle
    //When waffleMenu newWaffleIsChosen move mainWaffle
    //Move mainWaffle to x:290, y:480 with CubicIn easing in 400 ms (24 Ticks)
    mainWaffle.clearMoveAnimationEndedAction();
    mainWaffle.startMoveAnimation(290, 480, 24, touchgfx::EasingEquations::cubicEaseIn, touchgfx::EasingEquations::cubicEaseIn);
    mainWaffle.setMoveAnimationEndedAction(hideTheMainWaffleEndedCallback);
}

void SVGViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &leftButton)
    {
        //MoveTheIceScoopsToLeft
        //When leftButton clicked call virtual function
        //Call moveIceScoopsToLeft
        moveIceScoopsToLeft();
    }
    if (&src == &rightButton)
    {
        //MoveTheIceScoopsToRight
        //When rightButton clicked call virtual function
        //Call moveIceScoopsToRight
        moveIceScoopsToRight();
    }
    if (&src == &backButton)
    {
        //GoBackToMenu
        //When backButton clicked change screen to Menu
        //Go to Menu with screen transition towards North
        application().gotoMenuScreenWipeTransitionNorth();
    }
}

void SVGViewBase::waffleMenuSlideMenuChangedStateCallbackHandler()
{
    //ResetTheTickCounter
    //When waffleMenu slideMenuChangedState call virtual function
    //Call resetTickCounter
    resetTickCounter();
}

void SVGViewBase::hideTheMainWaffleEndedCallbackHandler(const touchgfx::MoveAnimator<touchgfx::SVGImage>& comp)
{
    //ChangeTheMainWaffle
    //When HideTheMainWaffle completed call virtual function
    //Call changeTheMainWaffle
    changeTheMainWaffle();

}
