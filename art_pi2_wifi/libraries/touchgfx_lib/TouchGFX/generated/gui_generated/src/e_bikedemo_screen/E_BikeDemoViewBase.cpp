/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/e_bikedemo_screen/E_BikeDemoViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

E_BikeDemoViewBase::E_BikeDemoViewBase() :
    buttonCallback(this, &E_BikeDemoViewBase::buttonCallbackHandler)
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 800, 480);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    background.setXY(0, 0);
    background.setBitmap(touchgfx::Bitmap(BITMAP_MAIN_BACKGROUND_NUMBERS_ID));
    add(background);

    FPSLableText.setPosition(755, 192, 29, 26);
    FPSLableText.setColor(touchgfx::Color::getColorFromRGB(125, 142, 245));
    FPSLableText.setLinespacing(0);
    FPSLableText.setTypedText(touchgfx::TypedText(T_FPSLABELTEXT));
    add(FPSLableText);

    speedometerBackgroundMPH.setXY(192, 0);
    speedometerBackgroundMPH.setBitmap(touchgfx::Bitmap(BITMAP_MAIN_BACKGROUND_NUMBERS_MPH_ID));
    add(speedometerBackgroundMPH);

    graph.setPosition(184, 372, 422, 65);
    graph.setScale(1);
    graph.setGraphAreaMargin(0, 0, 0, 0);
    graph.setGraphAreaPadding(0, 0, 0, 0);
    graph.setGraphRangeY(0, 255);
    graphLine1Painter.setColor(touchgfx::Color::getColorFromRGB(25, 255, 198));
    graphLine1.setPainter(graphLine1Painter);
    graphLine1.setLineWidth(3);
    graph.addGraphElement(graphLine1);


    add(graph);

    currentVelocity.setXY(335, 164);
    currentVelocity.setColor(touchgfx::Color::getColorFromRGB(210, 243, 255));
    currentVelocity.setLinespacing(0);
    Unicode::snprintf(currentVelocityBuffer, CURRENTVELOCITY_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_B6UT).getText());
    currentVelocity.setWildcard(currentVelocityBuffer);
    currentVelocity.resizeToCurrentText();
    currentVelocity.setTypedText(touchgfx::TypedText(T_SPEEDVALUE));
    add(currentVelocity);

    totalDistance.setPosition(353, 323, 95, 29);
    totalDistance.setColor(touchgfx::Color::getColorFromRGB(210, 243, 255));
    totalDistance.setLinespacing(0);
    Unicode::snprintf(totalDistanceBuffer, TOTALDISTANCE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_XB5M).getText());
    totalDistance.setWildcard(totalDistanceBuffer);
    totalDistance.setTypedText(touchgfx::TypedText(T_TOTALDISTANCEMOVED));
    add(totalDistance);

    remaining.setXY(199, 326);
    remaining.setColor(touchgfx::Color::getColorFromRGB(210, 243, 255));
    remaining.setLinespacing(0);
    Unicode::snprintf(remainingBuffer, REMAINING_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_49Q7).getText());
    remaining.setWildcard(remainingBuffer);
    remaining.resizeToCurrentText();
    remaining.setTypedText(touchgfx::TypedText(T_BATTERYLIFETIME));
    add(remaining);

    remainingLabel.setPosition(189, 304, 66, 19);
    remainingLabel.setColor(touchgfx::Color::getColorFromRGB(125, 142, 245));
    remainingLabel.setLinespacing(0);
    remainingLabel.setTypedText(touchgfx::TypedText(T_REMAININGLABEL));
    add(remainingLabel);

    elevationLabel.setXY(371, 444);
    elevationLabel.setColor(touchgfx::Color::getColorFromRGB(210, 243, 255));
    elevationLabel.setLinespacing(0);
    Unicode::snprintf(elevationLabelBuffer, ELEVATIONLABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_52Q4).getText());
    elevationLabel.setWildcard(elevationLabelBuffer);
    elevationLabel.resizeToCurrentText();
    elevationLabel.setTypedText(touchgfx::TypedText(T_ELEVATIONVALUE));
    add(elevationLabel);

    highlightMph.setPosition(160, 0, 480, 480);
    highlightMph.setCenter(240, 240);
    highlightMph.setRadius(186);
    highlightMph.setLineWidth(108);
    highlightMph.setArc(-90, -57);
    highlightMph.setCapPrecision(180);
    highlightMphPainter.setBitmap(touchgfx::Bitmap(BITMAP_SPEEDOMETER_FILL_OVERLAY_NUMBERS_MPH_ID));
    highlightMph.setPainter(highlightMphPainter);
    add(highlightMph);

    highlightKmh.setPosition(160, 0, 480, 480);
    highlightKmh.setCenter(240, 240);
    highlightKmh.setRadius(186);
    highlightKmh.setLineWidth(108);
    highlightKmh.setArc(-90, -57);
    highlightKmh.setCapPrecision(180);
    highlightKmhPainter.setBitmap(touchgfx::Bitmap(BITMAP_SPEEDOMETER_FILL_OVERLAY_NUMBERS_KMH_ID));
    highlightKmh.setPainter(highlightKmhPainter);
    highlightKmh.setVisible(false);
    add(highlightKmh);

    needle.setXY(160, 0);
    needle.setBitmap(touchgfx::Bitmap(BITMAP_SPEEDOMETER_NEEDLE_ID));
    needle.setWidth(480);
    needle.setHeight(240);
    needle.setBitmapPosition(214.0f, 0.0f);
    needle.setScale(1.0f);
    needle.setCameraDistance(1000.0f);
    needle.setOrigo(240.0f, 240.0f, 1000.0f);
    needle.setCamera(240.0f, 120.0f);
    needle.setAngles(0.0f, 0.0f, -1.0f);
    needle.setRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    add(needle);

    velocityMiles.setXY(361, 133);
    velocityMiles.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_MPH_NORMAL_ID), touchgfx::Bitmap(BITMAP_BUTTON_MPH_PRESSED_ID));
    velocityMiles.setAction(buttonCallback);
    add(velocityMiles);

    velocityKmh.setXY(361, 133);
    velocityKmh.setBitmaps(touchgfx::Bitmap(BITMAP_BUTTON_KMH_NORMAL_ID), touchgfx::Bitmap(BITMAP_BUTTON_KMH_PRESSED_ID));
    velocityKmh.setVisible(false);
    velocityKmh.setAction(buttonCallback);
    add(velocityKmh);

    totalDistanceKm.setXY(372, 303);
    totalDistanceKm.setColor(touchgfx::Color::getColorFromRGB(125, 142, 245));
    totalDistanceKm.setLinespacing(0);
    totalDistanceKm.setTypedText(touchgfx::TypedText(T_TOTALDISTANCEKM_LABLE));
    totalDistanceKm.setVisible(false);
    add(totalDistanceKm);

    totalDistanceMi.setPosition(374, 303, 54, 19);
    totalDistanceMi.setColor(touchgfx::Color::getColorFromRGB(125, 142, 245));
    totalDistanceMi.setLinespacing(0);
    totalDistanceMi.setTypedText(touchgfx::TypedText(T_TOTALDISTANCEMPH_LABLE));
    add(totalDistanceMi);

    battery.setXY(192, 263);
    battery.setBitmap(touchgfx::Bitmap(BITMAP_BATTERY_STEPS_FULL_ID));
    add(battery);

    modeOff.setXY(463, 334);
    modeOff.setBitmaps(touchgfx::Bitmap(BITMAP_OFF_BUTTON_NORMAL_ID), touchgfx::Bitmap(BITMAP_OFF_BUTTON_ACTIVE_ID), touchgfx::Bitmap(BITMAP_OFF_BUTTON_ACTIVE_ID), touchgfx::Bitmap(BITMAP_OFF_BUTTON_ACTIVE_ID));
    modeOff.setSelected(false);
    modeOff.setDeselectionEnabled(false);
    modeGroup.add(modeOff);
    add(modeOff);

    modeStandard.setXY(481, 303);
    modeStandard.setBitmaps(touchgfx::Bitmap(BITMAP_STANDARD_BUTTON_NORMAL_ID), touchgfx::Bitmap(BITMAP_STANDARD_BUTTON_ACTIVE_ID), touchgfx::Bitmap(BITMAP_STANDARD_BUTTON_ACTIVE_ID), touchgfx::Bitmap(BITMAP_STANDARD_BUTTON_ACTIVE_ID));
    modeStandard.setSelected(true);
    modeStandard.setDeselectionEnabled(false);
    modeGroup.add(modeStandard);
    add(modeStandard);

    modeSport.setXY(507, 272);
    modeSport.setBitmaps(touchgfx::Bitmap(BITMAP_MODE_SPORT_INACTIVE_ID), touchgfx::Bitmap(BITMAP_MODE_SPORT_ACTIVE_ID), touchgfx::Bitmap(BITMAP_MODE_SPORT_ACTIVE_ID), touchgfx::Bitmap(BITMAP_MODE_SPORT_ACTIVE_ID));
    modeSport.setSelected(false);
    modeSport.setDeselectionEnabled(false);
    modeGroup.add(modeSport);
    add(modeSport);

    modeMax.setXY(520, 241);
    modeMax.setBitmaps(touchgfx::Bitmap(BITMAP_MAX_BUTTON_NORMAL_ID), touchgfx::Bitmap(BITMAP_MAX_BUTTON_ACTIVE_ID), touchgfx::Bitmap(BITMAP_MAX_BUTTON_ACTIVE_ID), touchgfx::Bitmap(BITMAP_MAX_BUTTON_ACTIVE_ID));
    modeMax.setSelected(false);
    modeMax.setDeselectionEnabled(false);
    modeGroup.add(modeMax);
    add(modeMax);

    backButton.setXY(0, 0);
    backButton.setBitmaps(touchgfx::Bitmap(BITMAP_BACK_BUTTON_NORMAL_EBIKE_ID), touchgfx::Bitmap(BITMAP_BACK_BUTTON_PRESSED_EBIKE_ID));
    backButton.setAction(buttonCallback);
    add(backButton);

    directionLabelText.setPosition(14, 256, 85, 26);
    directionLabelText.setColor(touchgfx::Color::getColorFromRGB(125, 142, 245));
    directionLabelText.setLinespacing(0);
    directionLabelText.setTypedText(touchgfx::TypedText(T_DIRECTIONLABEL));
    add(directionLabelText);

    rotationDegreeText.setPosition(18, 378, 150, 70);
    rotationDegreeText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    rotationDegreeText.setLinespacing(0);
    Unicode::snprintf(rotationDegreeTextBuffer, ROTATIONDEGREETEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_ZU1M).getText());
    rotationDegreeText.setWildcard(rotationDegreeTextBuffer);
    rotationDegreeText.setTypedText(touchgfx::TypedText(T_ROTATIONDEGREE_EBIKE));
    add(rotationDegreeText);

    rotationDirectionText.setPosition(32, 295, 90, 95);
    rotationDirectionText.setColor(touchgfx::Color::getColorFromRGB(25, 255, 198));
    rotationDirectionText.setLinespacing(0);
    Unicode::snprintf(rotationDirectionTextBuffer, ROTATIONDIRECTIONTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_3RS8).getText());
    rotationDirectionText.setWildcard(rotationDirectionTextBuffer);
    rotationDirectionText.setTypedText(touchgfx::TypedText(T_ROTATIONDIRECTION));
    add(rotationDirectionText);

    navigationLabelText.setXY(687, 252);
    navigationLabelText.setColor(touchgfx::Color::getColorFromRGB(125, 142, 245));
    navigationLabelText.setLinespacing(0);
    navigationLabelText.setTypedText(touchgfx::TypedText(T_NAVIGATIONLABEL));
    add(navigationLabelText);

    compass.setXY(639, 314);
    compass.setBitmap(touchgfx::Bitmap(BITMAP_COMPASS_ID));
    compass.setWidth(150);
    compass.setHeight(150);
    compass.setBitmapPosition(2.0f, 2.0f);
    compass.setScale(1.0f);
    compass.setCameraDistance(1000.0f);
    compass.setOrigo(75.0f, 75.0f, 1000.0f);
    compass.setCamera(75.0f, 75.0f);
    compass.setAngles(0.0f, 0.0f, 0.0f);
    compass.setRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
    add(compass);

    compassNeedle.setXY(665, 360);
    compassNeedle.setBitmap(touchgfx::Bitmap(BITMAP_COMPASS_ARROW_ID));
    add(compassNeedle);

    MCULoadLableText.setPosition(14, 198, 76, 26);
    MCULoadLableText.setColor(touchgfx::Color::getColorFromRGB(125, 142, 245));
    MCULoadLableText.setLinespacing(0);
    MCULoadLableText.setTypedText(touchgfx::TypedText(T_MCULABELTEXT));
    add(MCULoadLableText);

    mcuLoadPercentageContainer.setXY(22, 76);
    add(mcuLoadPercentageContainer);

    frameRateContainer.setXY(677, 76);
    add(frameRateContainer);

    graphOverlay.setXY(170, 370);
    graphOverlay.setBitmap(touchgfx::Bitmap(BITMAP_GRAPH_OVERLAY_ID));
    add(graphOverlay);
}

E_BikeDemoViewBase::~E_BikeDemoViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void E_BikeDemoViewBase::setupScreen()
{
    mcuLoadPercentageContainer.initialize();
    frameRateContainer.initialize();
}

void E_BikeDemoViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &velocityKmh)
    {
        //selectMiles
        //When velocityKmh clicked call virtual function
        //Call selectMiles
        selectMiles();

        //hideKmhButton
        //When selectMiles completed hide velocityKmh
        //Hide velocityKmh
        velocityKmh.setVisible(false);
        velocityKmh.invalidate();


        //showMilesButton
        //When selectMiles completed show velocityMiles
        //Show velocityMiles
        velocityMiles.setVisible(true);
        velocityMiles.invalidate();


        //showTotalDistanceMiles
        //When selectMiles completed show totalDistanceMi
        //Show totalDistanceMi
        totalDistanceMi.setVisible(true);
        totalDistanceMi.invalidate();


        //hideTotalDistanceKm
        //When selectMiles completed hide totalDistanceKm
        //Hide totalDistanceKm
        totalDistanceKm.setVisible(false);
        totalDistanceKm.invalidate();


        //hideHighlightKmh
        //When selectMiles completed hide highlightKmh
        //Hide highlightKmh
        highlightKmh.setVisible(false);
        highlightKmh.invalidate();


        //showHighlightMph
        //When selectMiles completed show highlightMph
        //Show highlightMph
        highlightMph.setVisible(true);
        highlightMph.invalidate();


        //showMphBackground
        //When selectMiles completed show speedometerBackgroundMPH
        //Show speedometerBackgroundMPH
        speedometerBackgroundMPH.setVisible(true);
        speedometerBackgroundMPH.invalidate();
    }
    if (&src == &velocityMiles)
    {
        //selectKmh
        //When velocityMiles clicked call virtual function
        //Call selectKmh
        selectKmh();

        //hideMilesButton
        //When selectKmh completed hide velocityMiles
        //Hide velocityMiles
        velocityMiles.setVisible(false);
        velocityMiles.invalidate();


        //showKmhButton
        //When selectKmh completed show velocityKmh
        //Show velocityKmh
        velocityKmh.setVisible(true);
        velocityKmh.invalidate();


        //showTotalDistanceKm
        //When selectKmh completed show totalDistanceKm
        //Show totalDistanceKm
        totalDistanceKm.setVisible(true);
        totalDistanceKm.invalidate();


        //hideTotalDistanceMi
        //When selectKmh completed hide totalDistanceMi
        //Hide totalDistanceMi
        totalDistanceMi.setVisible(false);
        totalDistanceMi.invalidate();


        //showHighlightKmh
        //When selectKmh completed show highlightKmh
        //Show highlightKmh
        highlightKmh.setVisible(true);
        highlightKmh.invalidate();


        //hideHighlightMph
        //When selectKmh completed hide highlightMph
        //Hide highlightMph
        highlightMph.setVisible(false);
        highlightMph.invalidate();


        //hideMphBackground
        //When selectKmh completed hide speedometerBackgroundMPH
        //Hide speedometerBackgroundMPH
        speedometerBackgroundMPH.setVisible(false);
        speedometerBackgroundMPH.invalidate();
    }
    if (&src == &backButton)
    {
        //GoBackToMenu
        //When backButton clicked change screen to Menu
        //Go to Menu with screen transition towards South
        application().gotoMenuScreenWipeTransitionSouth();
    }
}
